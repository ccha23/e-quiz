# namespace for the helm deployment
namespace := {{ namespace }}
# release name for the helm deployment
release := {{ release }}
# registry name to push docker images built for equiz
registry := {{ registry }}
# project name used for docker-compose and the prefix for images built for equiz such as html, phpfpminit, and phpfpm.
project := {{ namespace }}
tag := latest

# Build and push docker images for equiz
push.%:
	@cd $*-docker && \
	make registry=$(registry) name=$(project)_$* tag=$(tag)

push: push.html push.phpfpm

# Create the namespace if it does not exist
namespace:
	@if ! kubectl get namespace $(namespace) >/dev/null 2>&1; then \
        echo "Creating namespace $(namespace)"; \
        kubectl create namespace $(namespace); \
    else \
        echo "Namespace $(namespace) already exists"; \
    fi

# Remove the namespace
# NOTE:
#   - Helm deployments and other resources created under the namespace will be removed.
rm.namespace:
	@if kubectl get namespace $(namespace) >/dev/null 2>&1; then \
		echo "Removing namespace $(namespace)..."; \
		kubectl delete namespace $(namespace); \
    fi

# Helm upgrade equiz
upgrade: namespace push
	@echo "Helm upgrading $(release) in $(namespace)..." && \
	microk8s helm upgrade -i -n $(namespace) $(release) ../chart -f values.yaml --wait

# Helm test upgrade
test:
	@echo "Helm test upgrading $(release) in $(namespace)..."
	microk8s helm upgrade -i -n $(namespace) $(release) ../chart -f values.yaml --wait --dry-run --debug

# Get the helm deployment and resources created
status:
	@helm list -n $(namespace) && kubectl get all -n $(namespace)

# Helm delete equiz
delete:
	@echo "Deleting $(release) from $(namespace)..."
	microk8s helm delete -n $(namespace) $(release) --wait

# Cleanup
# Remove docker-compose and helm deployments along with the persistent volumes.
clean: rm.up rm.namespace
	@echo "Cleaning up..."

# -------------------------------------------------------------
# Test docker images with docker compose

# Docker-compose up equiz
up:
	@echo "Running docker-compose up..."
	docker-compose -p $(project) up --build

# Docker-compose down equiz
down:
	@echo "Running docker-compose down..."
	docker-compose -p $(project) down

# Docker-compose down equiz and remove the volumes created
rm.up:
	@echo "Running docker-compose down and removing docker volumes..."
	docker-compose -p $(project) down -v

# To run additional setup scripts such as creating a test course/plan for jmeter load testing
sbin:
	# Copy additional setup scripts to phpfpm
	kubectl cp -c phpfpm sbin/* $(namespace)/phpfpm-0:/usr/local/sbin/ && \
	kubectl exec phpfpm-0 -n $(namespace) -c phpfpm -- chmod -R +x /usr/local/sbin && \
	# Attach a shell to run scripts as www-data user
	kubectl exec phpfpm-0 -it -n $(namespace) -c phpfpm -- su -s /bin/sh www-data

.PHONY: up down clean upgrade delete namespace test rm.% push.% push sbin